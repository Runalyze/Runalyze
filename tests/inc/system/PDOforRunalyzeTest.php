<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-02-14 at 21:31:50.
 */
class PDOforRunalyzeTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var PDOforRunalyze
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = DB::getInstance();
		$this->object->stopAddingAccountID();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers PDOforRunalyze::startAddingAccountID
	 * @covers PDOforRunalyze::stopAddingAccountID
	 * @covers PDOforRunalyze::setAccountID
	 */
	public function testStartAddingAccountID() {
		mysql_query('INSERT INTO `runalyze_training` (`s`, `accountid`) VALUES(100, 1)');
		mysql_query('INSERT INTO `runalyze_training` (`s`, `accountid`) VALUES(200, 1)');
		mysql_query('INSERT INTO `runalyze_training` (`s`, `accountid`) VALUES(66, 3)');

		$this->object->setAccountID(1);
		$this->object->startAddingAccountID();

		$this->assertEquals( 300, $this->object->query('SELECT SUM(`s`) FROM `runalyze_training`')->fetchColumn() );
		$this->assertEquals( 2, $this->object->query('SELECT COUNT(*) FROM `runalyze_training`')->fetchColumn() );

		$this->object->setAccountID(3);

		$this->assertEquals( 66, $this->object->query('SELECT SUM(`s`) FROM `runalyze_training`')->fetchColumn() );
		$this->assertEquals( 1, $this->object->query('SELECT COUNT(*) FROM `runalyze_training`')->fetchColumn() );

		$this->object->stopAddingAccountID();

		$this->assertEquals( 366, $this->object->query('SELECT SUM(`s`) FROM `runalyze_training`')->fetchColumn() );
		$this->assertEquals( 3, $this->object->query('SELECT COUNT(*) FROM `runalyze_training`')->fetchColumn() );

		mysql_query('TRUNCATE TABLE `runalyze_training`');
	}

	/**
	 * @covers PDOforRunalyze::fetchByID
	 * @covers PDOforRunalyze::deleteByID
	 */
	public function testFetchByID() {
		$this->assertEquals( 0, $this->object->query('SELECT COUNT(*) FROM `runalyze_training`')->fetchColumn() );

		mysql_query('INSERT INTO `runalyze_training` (`id`, `s`) VALUES(1, 100)');
		mysql_query('INSERT INTO `runalyze_training` (`id`, `s`) VALUES(2, 200)');
		mysql_query('INSERT INTO `runalyze_training` (`id`, `s`) VALUES(3, 300)');

		$Training1 = $this->object->fetchByID('training', 1);
		$this->assertEquals( 100, $Training1['s'] );

		$Training2 = $this->object->fetchByID('training', 2);
		$this->assertEquals( 200, $Training2['s'] );

		$Training3 = $this->object->fetchByID('training', 3);
		$this->assertEquals( 300, $Training3['s'] );

		$this->assertEquals( 3, $this->object->query('SELECT COUNT(*) FROM `runalyze_training`')->fetchColumn() );

		$this->object->deleteByID('training', 2);
		$this->assertEquals( "1,3", $this->object->query('SELECT GROUP_CONCAT(`id`) FROM `runalyze_training` GROUP BY `accountid`')->fetchColumn() );

		$this->assertEquals( 2, $this->object->query('SELECT COUNT(*) FROM `runalyze_training`')->fetchColumn() );

		$this->object->deleteByID('training', 1);
		$this->object->deleteByID('training', 3);

		$this->assertEquals( 0, $this->object->query('SELECT COUNT(*) FROM `runalyze_training`')->fetchColumn() );

		mysql_query('TRUNCATE TABLE `runalyze_training`');
	}

	/**
	 * @covers PDOforRunalyze::insert
	 * @covers PDOforRunalyze::update
	 * @covers PDOforRunalyze::updateWhere
	 * @covers PDOforRunalyze::exec
	 */
	public function testUpdate() {
		$this->object->insert('training', array('id', 's', 'distance'), array(1, 600, 1));
		$this->object->insert('training', array('id', 's', 'distance'), array(2, 900, 1));
		$this->object->insert('training', array('id', 's', 'distance'), array(3, 300, 1));

		$this->object->update('training', 1, 'distance', 2);
		$this->assertEquals( array(600, 2), $this->object->query('SELECT `s`, `distance` FROM `runalyze_training` WHERE `id`=1 LIMIT 1')->fetch(PDO::FETCH_NUM) );

		$this->object->update('training', 2, 'distance', 3);
		$this->assertEquals( array(900, 3), $this->object->query('SELECT `s`, `distance` FROM `runalyze_training` WHERE `id`=2 LIMIT 1')->fetch(PDO::FETCH_NUM) );

		$this->object->update('training', 3, array('s', 'distance'), array(150, 0.5));
		$this->assertEquals( array(150, 0.5), $this->object->query('SELECT `s`, `distance` FROM `runalyze_training` WHERE `id`=3 LIMIT 1')->fetch(PDO::FETCH_NUM) );

		$this->object->updateWhere('training', '`distance` > 1', 'comment', 'Super weit.');
		$this->assertEquals( "1,2", $this->object->query('SELECT GROUP_CONCAT(`id`) FROM `runalyze_training` WHERE `comment`="Super weit." GROUP BY `accountid`')->fetchColumn() );

		$this->assertEquals( 3, $this->object->exec('DELETE FROM `runalyze_training`') );
		$this->assertEquals( 0, $this->object->query('SELECT COUNT(*) FROM `runalyze_training`')->fetchColumn() );

		mysql_query('TRUNCATE TABLE `runalyze_training`');
	}

	/**
	 * @covers PDOforRunalyze::prepare
	 */
	public function testPrepare() {
		$Insert = $this->object->prepare('INSERT INTO `runalyze_training` (`id`, `s`, `distance`) VALUES (:id, :s, :distance)');
		$Insert->bindValue('id', 1);
		$Insert->bindValue('s', 300);
		$Insert->bindValue('distance', 1);
		$Insert->execute();

		$Insert->bindValue('id', 2);
		$Insert->bindValue('s', 610);
		$Insert->bindValue('distance', 2.1);
		$Insert->execute();

		$Insert->bindValue('id', 3);
		$Insert->bindValue('s', 3111);
		$Insert->bindValue('distance', 11.23);
		$Insert->execute();

		$id = 0;
		$RequestDistance = $this->object->prepare('SELECT `distance` FROM `runalyze_training` WHERE `id`=:id');
		$RequestDistance->bindParam('id', $id);

		$id = 1;
		$RequestDistance->execute();
		$this->assertEquals( 1, $RequestDistance->fetchColumn() );

		$id = 2;
		$RequestDistance->execute();
		$this->assertEquals( 2.1, $RequestDistance->fetchColumn() );

		$id = 3;
		$RequestDistance->execute();
		$this->assertEquals( 11.23, $RequestDistance->fetchColumn() );

		mysql_query('TRUNCATE TABLE `runalyze_training`');
	}

	/**
	 * @covers PDOforRunalyze::escape
	 */
	public function testEscape() {
		$this->assertEquals( 'NULL', PDOforRunalyze::escape(null) );
		$this->assertEquals( 1, PDOforRunalyze::escape(true) );
		$this->assertEquals( 0, PDOforRunalyze::escape(false) );

		$this->assertEquals( array(0.123, '"5\" OR 1=1"'), PDOforRunalyze::escape(array(0.123, '5" OR 1=1')));
	}

}

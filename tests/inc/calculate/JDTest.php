<?php

if (!defined('CONF_JD_USE_VDOT_CORRECTOR'))
	define('CONF_JD_USE_VDOT_CORRECTOR', true);

require_once dirname(__FILE__) . '/../../../inc/calculate/class.JD.php';

/**
 * Test class for JD.
 * Generated by PHPUnit on 2012-04-25 at 20:14:32.
 */
class JDTest extends PHPUnit_Framework_TestCase {

	/**
	 * @covers JD::Competition2VDOT
	 */
	public function testCompetition2VDOT() {
		// VDOT: 32
		$this->assertTrue( Validator::isClose( JD::Competition2VDOT(10, 60*60 + 26), 32 ) );
		$this->assertTrue( Validator::isClose( JD::Competition2VDOT(21.0975, 60*133 + 49), 32 ) );
		$this->assertTrue( Validator::isClose( JD::Competition2VDOT(42.195, 60*274 + 59), 32 ) );
		// VDOT: 48
		$this->assertTrue( Validator::isClose( JD::Competition2VDOT(10, 60*42 + 50), 48 ) );
		$this->assertTrue( Validator::isClose( JD::Competition2VDOT(21.0975, 60*94 + 53), 48 ) );
		$this->assertTrue( Validator::isClose( JD::Competition2VDOT(42.195, 60*197 + 27), 48 ) );
		// VDOT: 60
		$this->assertTrue( Validator::isClose( JD::Competition2VDOT(10, 60*35 + 22), 60 ) );
		$this->assertTrue( Validator::isClose( JD::Competition2VDOT(21.0975, 60*78 + 9), 60 ) );
		$this->assertTrue( Validator::isClose( JD::Competition2VDOT(42.195, 60*163 + 25), 60 ) );
	}

	/**
	 * @covers JD::VDOT2v
	 */
	public function testVDOT2v() {
		// m/min
		$this->assertEquals( 300.75, JD::VDOT2v(60) );
	}

	/**
	 * @covers JD::pVDOT2pHF
	 */
	public function testPVDOT2pHF() {
		$this->assertEquals( 0.66, JD::pVDOT2pHF(0.6), '', 0.03);
		$this->assertEquals( 0.755, JD::pVDOT2pHF(0.7), '', 0.03);
		$this->assertEquals( 0.85, JD::pVDOT2pHF(0.8), '', 0.03);
		$this->assertEquals( 0.93, JD::pVDOT2pHF(0.9), '', 0.03);
		$this->assertEquals( 1, JD::pVDOT2pHF(1), '', 0.03 );
	}

	/**
	 * @covers JD::pHF2pVDOT
	 */
	public function testPHF2pVDOT() {
		$this->assertEquals( 0.64, JD::pHF2pVDOT(0.7), '', 0.03);
		$this->assertEquals( 0.75, JD::pHF2pVDOT(0.8), '', 0.03);
		$this->assertEquals( 0.86, JD::pHF2pVDOT(0.9), '', 0.03);
		$this->assertEquals( 1, JD::pHF2pVDOT(1), '', 0.03 );
	}

	/**
	 * @covers JD::v2Pace
	 */
	public function testV2Pace() {
		$this->assertEquals( "3:20", JD::v2Pace(300.75) );
	}

	/**
	 * @covers JD::Pace2v
	 */
	public function testPace2v() {
		$this->assertEquals( 300, JD::Pace2v(200) );
	}

	/**
	 * @covers JD::correctVDOT
	 */
	public function testCorrectVDOT() {
		// bootstrap.php will set corrector to 1
		$this->assertEquals( 50, JD::correctVDOT(50) );
	}

	/**
	 * @covers JD::Training2VDOT
	 */
	public function testTraining2VDOT() {
		// pulse_avg = 200 is HR_MAX
		$this->assertEquals( 40.2, JD::Training2VDOT(0, array(
			'sportid'	=> CONF_RUNNINGSPORT,
			'distance'	=> 10,
			's'			=> 50*60,
			'pulse_avg'	=> 200
		)), '', 0.1);
		$this->assertEquals( 52.3, JD::Training2VDOT(0, array(
			'sportid'	=> CONF_RUNNINGSPORT,
			'distance'	=> 10,
			's'			=> 40*60,
			'pulse_avg'	=> 200
		)), '', 0.1);
		$this->assertEquals( 61.1, JD::Training2VDOT(0, array(
			'sportid'	=> CONF_RUNNINGSPORT,
			'distance'	=> 10,
			's'			=> 35*60,
			'pulse_avg'	=> 200
		)), '', 0.1);
		$this->assertEquals( 73.3, JD::Training2VDOT(0, array(
			'sportid'	=> CONF_RUNNINGSPORT,
			'distance'	=> 10,
			's'			=> 30*60,
			'pulse_avg'	=> 200
		)), '', 0.1);
	}

	/**
	 * @covers JD::CompetitionPrognosis
	 * @todo Implement testCompetitionPrognosis().
	 */
	public function testCompetitionPrognosis() {
		// VDOT: 32
		$this->assertEquals( 60*60 + 26, JD::CompetitionPrognosis(32, 10), '', 5 );
		$this->assertEquals( 133*60 + 49, JD::CompetitionPrognosis(32, 21.0975), '', 10 );
		$this->assertEquals( 274*60 + 59, JD::CompetitionPrognosis(32, 42.195), '', 20 );
		// VDOT: 48
		$this->assertEquals( 42*60 + 50, JD::CompetitionPrognosis(48, 10), '', 5 );
		$this->assertEquals( 94*60 + 53, JD::CompetitionPrognosis(48, 21.0975), '', 10 );
		$this->assertEquals( 197*60 + 27, JD::CompetitionPrognosis(48, 42.195), '', 20 );
		// VDOT: 60
		$this->assertEquals( 35*60 + 22, JD::CompetitionPrognosis(60, 10), '', 5 );
		$this->assertEquals( 78*60 + 9, JD::CompetitionPrognosis(60, 21.0975), '', 10 );
		$this->assertEquals( 163*60 + 25, JD::CompetitionPrognosis(60, 42.195), '', 20 );
	}

	/**
	 * @covers JD::calculateVDOTform
	 */
	public function testCalculateVDOTform() {
		// TODO
		$this->assertEquals( 0, JD::calculateVDOTform() );
	}

	/**
	 * @covers JD::getVDOTcorrector
	 */
	public function testCalculateVDOTcorrector() {
		// TODO
		$this->assertEquals( 1, JD::getVDOTcorrector() );
	}

	/**
	 * @covers JD::VDOTcorrectorFor
	 */
	public function testVDOTcorrectorFor() {
		$this->assertEquals( 1, JD::VDOTcorrectorFor(0, array('vdot' => 60, 'vdot_by_time' => 60)) );
		$this->assertEquals( 6/7, JD::VDOTcorrectorFor(0, array('vdot' => 70, 'vdot_by_time' => 60)) );
		$this->assertEquals( 6/8.5, JD::VDOTcorrectorFor(0, array('vdot' => 85, 'vdot_by_time' => 60)) );
	}

}

?>

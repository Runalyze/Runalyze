<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-29 at 18:25:39.
 */
class SportSpeedTest extends PHPUnit_Framework_TestCase {
	/**
	 * @var SportSpeed
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {}

	/**
	 * @covers SportSpeed::getAppendix
	 */
	public function testgetAppendix() {
		$this->assertEquals( '', SportSpeed::getAppendix(SportSpeed::$NO) );
		$this->assertEquals( '&nbsp;km/h', SportSpeed::getAppendix(SportSpeed::$DEFAULT) );
		$this->assertEquals( '&nbsp;km/h', SportSpeed::getAppendix(SportSpeed::$KM_PER_H) );
		$this->assertEquals( '/100m', SportSpeed::getAppendix(SportSpeed::$MIN_PER_100M) );
		$this->assertEquals( '/km', SportSpeed::getAppendix(SportSpeed::$MIN_PER_KM) );
		$this->assertEquals( '&nbsp;m/s', SportSpeed::getAppendix(SportSpeed::$M_PER_S) );
	}

	/**
	 * @covers SportSpeed::getSpeed
	 * @covers SportSpeed::getSpeedWithAppendix
	 */
	public function testDefault() {
		$this->assertEquals( SportSpeed::getSpeed(1, 300, SportSpeed::$DEFAULT), '12,0');
		$this->assertEquals( SportSpeed::getSpeedWithAppendix(1, 300, SportSpeed::$DEFAULT), '12,0&nbsp;km/h');
	}

	/**
	 * @covers SportSpeed::getSpeed
	 * @covers SportSpeed::getSpeedWithAppendix
	 * @covers SportSpeed::noSpeed
	 */
	public function testNoSpeed() {
		$this->assertEquals( SportSpeed::getSpeed(1, 300, SportSpeed::$NO), '1,0&nbsp;km in 5:00');
		$this->assertEquals( SportSpeed::getSpeedWithAppendix(1, 300, SportSpeed::$NO), '1,0&nbsp;km in 5:00');
	}

	/**
	 * @covers SportSpeed::getSpeed
	 * @covers SportSpeed::getSpeedWithAppendix
	 * @covers SportSpeed::kmPerHour
	 */
	public function testKmPerHour() {
		$this->assertEquals( SportSpeed::getSpeed(1, 300, SportSpeed::$KM_PER_H), '12,0');
		$this->assertEquals( SportSpeed::getSpeedWithAppendix(1, 300, SportSpeed::$KM_PER_H), '12,0&nbsp;km/h');
	}

	/**
	 * @covers SportSpeed::getSpeed
	 * @covers SportSpeed::getSpeedWithAppendix
	 * @covers SportSpeed::minPer100m
	 */
	public function testMinPer100m() {
		$this->assertEquals( SportSpeed::getSpeed(1, 300, SportSpeed::$MIN_PER_100M), '0:30');
		$this->assertEquals( SportSpeed::getSpeed(1, 900, SportSpeed::$MIN_PER_100M), '1:30');
		$this->assertEquals( SportSpeed::getSpeedWithAppendix(1, 300, SportSpeed::$MIN_PER_100M), '0:30/100m');
		$this->assertEquals( SportSpeed::getSpeedWithAppendix(1, 900, SportSpeed::$MIN_PER_100M), '1:30/100m');
	}

	/**
	 * @covers SportSpeed::getSpeed
	 * @covers SportSpeed::getSpeedWithAppendix
	 * @covers SportSpeed::minPerKm
	 */
	public function testMinPerKM() {
		$this->assertEquals( SportSpeed::getSpeed(1, 300, SportSpeed::$MIN_PER_KM), '5:00');
		$this->assertEquals( SportSpeed::getSpeedWithAppendix(1, 300, SportSpeed::$MIN_PER_KM), '5:00/km');
	}

	/**
	 * @covers SportSpeed::getSpeed
	 * @covers SportSpeed::getSpeedWithAppendix
	 * @covers SportSpeed::mPerSecond
	 */
	public function testMPerSecond() {
		$this->assertEquals( SportSpeed::getSpeed(1, 300, SportSpeed::$M_PER_S), '3,3');
		$this->assertEquals( SportSpeed::getSpeedWithAppendix(1, 300, SportSpeed::$M_PER_S), '3,3&nbsp;m/s');
	}

}

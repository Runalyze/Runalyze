<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-04-01 at 17:25:06.
 */
class ImporterFiletypeFITTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var ImporterFiletypeFIT
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new ImporterFiletypeFIT;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	/**
	 * @expectedException RuntimeException
	 */
	public function test_nonexistingFile() {
		if (Shell::isPerlAvailable()) {
			$this->object->parseFile('idontexist.fit');
		}
	}

	/**
	 * Test: standard file
	 * Filename: "Standard.fit" 
	 */
	public function test_generalFile() {
		if (Shell::isPerlAvailable()) {
			$this->object->parseFile('../tests/testfiles/fit/Standard.fit');

			$this->assertFalse( $this->object->hasMultipleTrainings() );
			$this->assertFalse( $this->object->failed() );

			$this->assertEquals( 0*3600 + 53*60 + 06, $this->object->object()->getTimeInSeconds(), '', 30);
			$this->assertEquals( 1*3600 + 00*60 + 53, $this->object->object()->getElapsedTime() );
			$this->assertTrue( $this->object->object()->hasElapsedTime() );

			$this->assertEquals( 8.98, $this->object->object()->getDistance(), '', 0.1);
			$this->assertEquals( 305, $this->object->object()->getCalories(), '', 10);
			$this->assertEquals( 123, $this->object->object()->getPulseAvg(), '', 2);
			$this->assertEquals( 146, $this->object->object()->getPulseMax(), '', 2);
			$this->assertTrue( $this->object->object()->hasArrayAltitude() );
			$this->assertTrue( $this->object->object()->hasArrayDistance() );
			$this->assertTrue( $this->object->object()->hasArrayHeartrate() );
			$this->assertTrue( $this->object->object()->hasArrayLatitude() );
			$this->assertTrue( $this->object->object()->hasArrayLongitude() );
			$this->assertTrue( $this->object->object()->hasArrayPace() );
			$this->assertTrue( $this->object->object()->hasArrayTime() );

			$this->assertEquals( 1, $this->object->object()->Sport()->id() );

			$this->assertFalse( $this->object->object()->Splits()->areEmpty() );
		}
	}
}

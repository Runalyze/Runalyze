<?php

require_once dirname(__FILE__) . '/../../../inc/import/class.ParserTCX.php';

/**
 * Test class for ParserTCX.
 * Generated by PHPUnit on 2012-04-29 at 19:48:06.
 */
class ParserTCXTest extends PHPUnit_Framework_TestCase {

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {}

	/**
	 * Test: incorrect xml-file 
	 */
	public function test_empty() {
		$Parser = new ParserTCX('');
		$Parser->parseTraining();

		$this->assertFalse( $Parser->worked() );
		$this->assertNotEmpty( $Parser->getErrors() );
	}

	/**
	 * Test: incorrect xml-file 
	 */
	public function test_notGarmin() {
		$XML = '<any><xml><file /></xml></any>';

		$Parser = new ParserTCX($XML);
		$Parser->parseTraining();

		$this->assertFalse( $Parser->worked() );
		$this->assertNotEmpty( $Parser->getErrors() );
	}

	/**
	 * Test: standard file
	 * Filename: "Standard.tcx" 
	 */
	public function test_generalFile() {
		$XML    = file_get_contents(FRONTEND_PATH.'../tests/testfiles/tcx/Standard.tcx');
		$Parser = new ParserTCX($XML);
		$Parser->parseTraining();

		$this->assertFalse( $Parser->hasMultipleTrainings() );
		$this->assertTrue( $Parser->worked() );
		$this->assertTrue( Validator::isClose($Parser->get('s'), 6523) );
		$this->assertTrue( Validator::isClose($Parser->get('distance'), 22.224) );
		$this->assertTrue( Validator::isClose($Parser->get('kcal'), 1646) );
		$this->assertTrue( Validator::isClose($Parser->get('pulse_avg'), 145) );
		$this->assertTrue( Validator::isClose($Parser->get('pulse_max'), 172) );
		$this->assertEquals( 1, $Parser->get('sportid') );
		// TODO: missing values
	}

	/**
	 * Test: standard file
	 * Filename: "Could-Not-Be-Read_by-Florian.tcx" 
	 */
	public function test_specialFile() {
		$XML    = file_get_contents(FRONTEND_PATH.'../tests/testfiles/tcx/Could-Not-Be-Read_by-Florian.tcx');
		$Parser = new ParserTCX($XML);
		$Parser->parseTraining();

		$this->assertTrue( $Parser->worked() );
	}

	/**
	 * Test: multiple trainings
	 * Filename: "mehrere-trainings.tcx" 
	 */
	public function test_simpleMultipleTrainings() {
		$XML    = '
<root>
	<Activities>
		<Activity Sport="Running">
			<Id>2012-01-22T10:00:00Z</Id>
			<Lap><TotalTimeSeconds>300</TotalTimeSeconds><DistanceMeters>1000</DistanceMeters></Lap>
		</Activity>
		<Activity>
			<Id>2012-01-22T15:00:00Z</Id>
			<Lap><TotalTimeSeconds>600</TotalTimeSeconds><DistanceMeters>2000</DistanceMeters></Lap>
		</Activity>
		<Activity>
			<Id>2012-01-22T20:00:00Z</Id>
			<Lap><TotalTimeSeconds>3600</TotalTimeSeconds><DistanceMeters>10000</DistanceMeters></Lap>
		</Activity>
	</Activities>
</root>';

		$Parser = new ParserTCX($XML);

		$this->assertTrue( $Parser->worked() );
		$this->assertTrue( $Parser->hasMultipleTrainings() );
		$this->assertEquals( 3, $Parser->numberOfTrainings() );

		$i = 0;
		while ($Parser->nextTraining()) {
			if ($i == 0) {
				$this->assertEquals( 300, $Parser->get('s') );
				$this->assertEquals( 1, $Parser->get('distance') );
			} elseif ($i == 1) {
				$this->assertEquals( 600, $Parser->get('s') );
				$this->assertEquals( 2, $Parser->get('distance') );
			} elseif ($i == 2) {
				$this->assertEquals( 3600, $Parser->get('s') );
				$this->assertEquals( 10, $Parser->get('distance') );
			} else {
				$this->fail('Loop over nextTraining() is too long.');
			}

			$i++;
		}

		$this->assertEquals( 3, $i, 'Loop never reached third training.');
		$this->assertTrue( $Parser->worked() );
	}

	/**
	 * Test: multiple trainings
	 * Filename: "Multiple-Trainings.tcx" 
	 */
	public function test_multipleTrainings() {
		$XML    = file_get_contents(FRONTEND_PATH.'../tests/testfiles/tcx/Multiple-Trainings.tcx');
		$Parser = new ParserTCX($XML);

		$this->assertTrue( $Parser->worked() );
		$this->assertTrue( $Parser->hasMultipleTrainings() );
		$this->assertEquals( 3, $Parser->numberOfTrainings() );

		$i = 0;
		while ($Parser->nextTraining()) {
			if ($i == 0) {
				$this->assertTrue( Validator::isClose($Parser->get('s'), 3780) );
				$this->assertTrue( Validator::isClose($Parser->get('distance'), 11.5) );
				$this->assertTrue( Validator::isClose($Parser->get('kcal'), 970) );
				$this->assertTrue( Validator::isClose($Parser->get('pulse_avg'), 155) );
				$this->assertTrue( Validator::isClose($Parser->get('pulse_max'), 165) );
			} elseif ($i == 1) {
				$this->assertTrue( Validator::isClose($Parser->get('s'), 2084) );
				$this->assertTrue( Validator::isClose($Parser->get('distance'), 7.236) );
				$this->assertTrue( Validator::isClose($Parser->get('kcal'), 615) );
				$this->assertTrue( Validator::isClose($Parser->get('pulse_avg'), 167, 2) ); // Rechnerisch eigtl. 167/169
				$this->assertTrue( Validator::isClose($Parser->get('pulse_max'), 182) );
			} elseif ($i == 2) {
				$this->assertTrue( Validator::isClose($Parser->get('s'), 3000) );
				$this->assertTrue( Validator::isClose($Parser->get('distance'), 9.197) );
				$this->assertTrue( Validator::isClose($Parser->get('kcal'), 823) );
				$this->assertTrue( Validator::isClose($Parser->get('pulse_avg'), 155, 2) );
				$this->assertTrue( Validator::isClose($Parser->get('pulse_max'), 166) );
			} else {
				$this->fail('Loop over nextTraining() is too long.');
			}

			$i++;
		}

		$this->assertEquals( 3, $i, 'Loop never reached third training.');
	}

	/**
	 * Test: standard file
	 * Filename: "Indoor-Training.tcx" 
	 */
	public function test_indoorTraining() {
		$XML    = file_get_contents(FRONTEND_PATH.'../tests/testfiles/tcx/Indoor-Training.tcx');
		$Parser = new ParserTCX($XML);
		$Parser->parseTraining();

		$this->assertTrue( $Parser->worked() );
		$this->assertTrue( Validator::isClose($Parser->get('s'), 7204) );
		$this->assertTrue( Validator::isClose($Parser->get('pulse_avg'), 122) );
		$this->assertTrue( Validator::isClose($Parser->get('pulse_max'), 149) );
		$this->assertEquals( 2, $Parser->get('sportid') );
	}

	/**
	 * Test: swimming
	 * Filename: "Swim-without-time_by-Timekiller.tcx" 
	 */
	public function test_swimTraining() {
		$XML    = file_get_contents(FRONTEND_PATH.'../tests/testfiles/tcx/Swim-without-time_by-Timekiller.tcx');
		$Parser = new ParserTCX($XML);
		$Parser->parseTraining();

		$this->assertTrue( $Parser->worked() );
		$this->assertTrue( Validator::isClose($Parser->get('s'), 2164) );
		$this->assertEquals( 5, $Parser->get('sportid') ); // "Other" is in the file
	}
}
<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-07 at 17:50:49.
 */
class ParserHRMSingleTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var ParserHRMSingle
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() { }

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() { }

	public function testVerySimple() {
		$String = '[Params]
Version=106
Monitor=0
SMode=11000000
Date=20120104
StartTime=05:35:03.0
Length=00:59:36.4

[IntTimes]
00:06:57.9	136	0	132	162
0	0	0	0	0	0
0	0	0	0	0
0	0	0	0	0	0
0	0	0	0	0	0
00:14:03.5	140	0	138	141
0	0	0	0	0	0
0	0	0	0	0
[HRData]
100	0	0
120	0	0';

		$Parser = new ParserHRMSingle($String);
		$Parser->parse();

		$this->assertFalse( $Parser->failed() );
		$this->assertEquals( mktime(5, 35, 3, 1, 4, 2012), $Parser->object()->getTimestamp() );
		$this->assertEquals( 59*60 + 36.4, $Parser->object()->getTimeInSeconds() );
		$this->assertEquals( 110, $Parser->object()->getPulseAvg() );
		$this->assertEquals( 120, $Parser->object()->getPulseMax() );
		$this->assertEquals( array(100,120), $Parser->object()->getArrayHeartrate() );
		$this->assertEquals( '0.000|6:58-0.000|7:06', $Parser->object()->Splits()->asString() );
	}

	public function testDefaultRecordingInterval() {
		$String = '[Params]
Version=105
Mode=110

[HRData]
100	100	220
120	120	225
125	120	230
120	100	220';

		$Parser = new ParserHRMSingle($String);
		$Parser->parse();

		$this->assertFalse( $Parser->failed() );
		$this->assertEquals( array(1, 2, 3, 4), $Parser->object()->getArrayTime() );
	}

	public function test5sRecordingInterval() {
		$String = '[Params]
Version=105
Interval=5
Mode=110

[HRData]
100	100	220
120	120	225
125	120	230
120	100	220';

		$Parser = new ParserHRMSingle($String);
		$Parser->parse();

		$this->assertFalse( $Parser->failed() );
		$this->assertEquals( array(5, 10, 15, 20), $Parser->object()->getArrayTime() );
	}

	public function testAltitudeAndEUmetricsInVersion105() {
		$String = '[Params]
Version=105
Mode=110

[HRData]
100	100	220
120	120	225
125	120	230
120	100	220';

		$Parser = new ParserHRMSingle($String);
		$Parser->parse();

		$this->assertFalse( $Parser->failed() );
		$this->assertEquals( array(100, 120, 125, 120), $Parser->object()->getArrayHeartrate() );
		$this->assertEquals( array(0.00278, 0.00611, 0.00944, 0.01222), $Parser->object()->getArrayDistance() );
		$this->assertEquals( array(220, 225, 230, 220), $Parser->object()->getArrayAltitude() );
		$this->assertFalse( $Parser->object()->hasArrayCadence() );
	}

	public function testCadenceAndUSmetricsInVersion105() {
		$String = '[Params]
Version=105
Mode=001

[HRData]
100	100	82
120	120	85
125	120	83
120	100	82';

		$Parser = new ParserHRMSingle($String);
		$Parser->parse();

		$this->assertFalse( $Parser->failed() );
		$this->assertEquals( array(100, 120, 125, 120), $Parser->object()->getArrayHeartrate() );
		$this->assertEquals( array(0.00446, 0.00984, 0.01522, 0.01968), $Parser->object()->getArrayDistance() );
		$this->assertEquals( array( 82,  85,  83,  82), $Parser->object()->getArrayCadence() );
		$this->assertFalse( $Parser->object()->hasArrayAltitude() );
	}

	public function testUSmetricsInVersion106() {
		$String = '[Params]
Version=106
SMode=11110001

[HRData]
100	100	82 760 320
120	120	85 780 350
125	120	83 770 330
120	100	82 760 300';

		$Parser = new ParserHRMSingle($String);
		$Parser->parse();

		$this->assertFalse( $Parser->failed() );
		$this->assertEquals( array(100, 120, 125, 120), $Parser->object()->getArrayHeartrate() );
		$this->assertEquals( array( 82,  85,  83,  82), $Parser->object()->getArrayCadence() );
		$this->assertEquals( array(232, 238, 235, 232), $Parser->object()->getArrayAltitude() );
		$this->assertEquals( array(320, 350, 330, 300), $Parser->object()->getArrayPower() );
	}

}
